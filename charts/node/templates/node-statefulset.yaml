apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "chainflip-node.fullname" . }}
  labels:
  {{- include "chainflip-node.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "chainflip-node.fullname" . }}
  {{- if or (eq .Values.common.role "archive") (eq .Values.common.role "full") }}
  replicas: {{ .Values.node.replicas }}
  updateStrategy:
    type: RollingUpdate
  {{- end }}
  selector:
    matchLabels:
  {{- include "chainflip-node.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
    {{- include "chainflip-node.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        {{- if or .Values.network.chain.chainspecUrl (eq .Values.common.role "validator") .Values.common.keys.generateKeysOnStart }}
        {{- if .Values.network.chain.chainspecUrl }}
        - name: download-chainspec
          image: curlimages/curl@sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b
          command:
            - /bin/sh
            - -c
            - |
              curl -L -o {{ include "chainflip-node.chain" . }} {{ .Values.network.chain.chainspecUrl }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
        {{- end }}
        {{- end }}
        {{- if .Values.node.chainData.removeParitydb }}
        - name: remove-paritydb
          image: curlimages/curl@sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b
          command:
            - /bin/sh
            - -c
            - |
              if [ -d "{{ include "chainflip-node.databasePath" . }}/paritydb" ]; then
                echo "Cleaning up paritydb directory..."
                rm -rvf {{ include "chainflip-node.databasePath" . }}/paritydb
                echo "Done!"
              else
                echo "Paritydb directory does not exist. Skipping removal!"
              fi
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
        {{- end }}
        {{- if .Values.node.chainData.removeRocksdb }}
        - name: remove-rocksdb
          image: curlimages/curl@sha256:9a1ed35addb45476afa911696297f8e115993df459278ed036182dd2cd22b67b
          command:
            - /bin/sh
            - -c
            - |
              if [ -d "{{ include "chainflip-node.databasePath" . }}/db" ]; then
                echo "Cleaning up rocksdb directory..."
                rm -rvf {{ include "chainflip-node.databasePath" . }}/db
                echo "Done!"
              else
                echo "Rocksdb directory does not exist. Skipping removal!"
              fi
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
        {{- end }}
        {{- if and .Values.node.chainData.snapshot.enabled (eq .Values.node.chainData.type "paritydb") }}
        - name: download-snapshot
          image: netdata/wget@sha256:b367d0f3c65320eac0d574d4219c6c7c5be8d45863b9875d815e2f77d678e4a3
          command:
            - /bin/sh
            - -c
            - |
              set -eu -o pipefail {{ if .Values.node.chainData.snapshot.debug }}-x{{ end }}
              if [ -d "{{ include "chainflip-node.databasePath" . }}/paritydb" ]; then
                echo "ParityDB directory already exists. Skipping chain snapshot download!"
              else
                if [ -d "{{ include "chainflip-node.databasePath" . }}/db" ]; then
                  echo "RocksDB directory already exists. You may want to clean it up to free up space!"
                fi
                mkdir -p "{{ include "chainflip-node.databasePath" . }}"
                echo "Downloading and extracting snapshot. This can take a while..."
                wget --no-verbose --show-progress --progress=dot:mega -O - https://snapshots.chainflip.io/{{ .Values.network.chain.name }}/cf_chaindata_pruned_paritydb.tar.gz | tar -xzf - -C "{{ include "chainflip-node.databasePath" . }}"
                echo "Snapshot extraction completed!"
              fi
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
        {{- end }}
        {{- if eq .Values.common.role "validator" }}    
        - name: inject-keys
          image: {{ include "chainflip-node.image" . }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}
          command:
            - /bin/sh
            - -c
            - |
              chainflip-node key insert \
                --key-type 'aura' \
                --scheme sr25519 \
                --chain {{ include "chainflip-node.chain" . }} \
                --suri "0x$(cat {{ .Values.common.keys.keysPath }}/{{ .Values.common.keys.signingKeyFileName }})" \
                --base-path {{ .Values.common.basePath }}
              chainflip-node key insert \
                --key-type 'gran' \
                --scheme ed25519 \
                --chain {{ include "chainflip-node.chain" . }} \
                --suri "0x$(cat {{ .Values.common.keys.keysPath }}/{{ .Values.common.keys.signingKeyFileName }})" \
                --base-path {{ .Values.common.basePath }}
        {{- end }}
        {{- if eq .Values.common.role "lp" }}    
        - name: inject-lp-keys
          image: {{ include "chainflip-node.image" . }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}/lp
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p {{ .Values.common.keys.keysPath }}/lp
              chainflip-node key insert \
                --key-type 'lqpr' \
                --scheme sr25519 \
                --chain {{ include "chainflip-node.chain" . }} \
                --suri "0x$(cat {{ .Values.common.keys.keysPath }}/lp/{{ .Values.common.keys.signingKeyFileName }})" \
                --base-path {{ .Values.common.basePath }}
        {{- end }}
        {{- if eq .Values.common.role "broker" }}    
        - name: inject-broker-keys
          image: {{ include "chainflip-node.image" . }}
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}/broker
          command:
            - /bin/sh
            - -c
            - |
              mkdir -p {{ .Values.common.keys.keysPath }}/broker
              chainflip-node key insert \
                --key-type 'brok' \
                --scheme sr25519 \
                --chain {{ include "chainflip-node.chain" . }} \
                --suri "0x$(cat {{ .Values.common.keys.keysPath }}/broker/{{ .Values.common.keys.signingKeyFileName }})" \
                --base-path {{ .Values.common.basePath }}
        {{- end }}
      containers:
        - name: chainflip-node
          image: "{{ include "chainflip-node.image" . }}"
          imagePullPolicy: {{ .Values.node.image.pullPolicy }}
          command:
            - /usr/local/bin/chainflip-node
          args:
            - --base-path={{ .Values.common.basePath }}
            - --chain={{ include "chainflip-node.chain" . }}
            {{- if or (eq .Values.common.role "lp") (eq .Values.common.role "broker") }}
            - --database=rocksdb
            {{- else }}
            - --database={{ .Values.node.chainData.type }}
            {{- end }}
            - --trie-cache-size=0
            {{- range .Values.network.bootnodes }}
            - --bootnodes={{ . }}
            {{- end }}
            {{- if eq .Values.common.role "validator" }}
            - --node-key-file={{ .Values.common.keys.keysPath }}/{{ .Values.common.keys.nodeKeyFileName }}
            - --validator
            {{- end }}
            {{- if eq .Values.common.role "archive" }}
            - --blocks-pruning=archive
            - --state-pruning=archive
            {{- end }}
            {{- if or (eq .Values.common.role "broker") (eq .Values.common.role "lp") }}
            - --sync=light-rpc
            {{- else if ne .Values.common.role "archive"  }}
            - --sync={{ .Values.node.syncMode }}
            {{- end }}
            {{- if and .Values.node.chainData.pruning.enabled ( ne .Values.common.role "broker" ) ( ne .Values.common.role "lp" ) }}
            - --blocks-pruning={{ .Values.node.chainData.pruning.blocks }}
            - --state-pruning={{ .Values.node.chainData.pruning.state }}
            {{- else if or ( eq .Values.common.role "broker" ) ( eq .Values.common.role "lp" ) }}
            - --blocks-pruning=128
            - --state-pruning=128
            {{- end }}
            - --port={{ .Values.node.ports.p2p.port  }}
            {{- if .Values.node.ports.metrics.enabled }}
            - --prometheus-port={{ .Values.node.ports.metrics.port }}
            {{- if .Values.node.ports.metrics.expose }}
            - --prometheus-external
            {{- end }}
            {{- end }}
            {{- if .Values.node.legacyRpc }}
            - --rpc-port=9933
            - --ws-port={{ .Values.node.ports.rpc.port }}
            - --unsafe-ws-external
            {{- else }}
            - --rpc-port={{ .Values.node.ports.rpc.port }}
            {{- end }}
            {{- if .Values.node.ports.rpc.expose }}
            - --rpc-cors=all
            - --rpc-methods=unsafe
            - --unsafe-rpc-external
            {{- end }}
            {{- with .Values.node.extraArgs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.node.ports }}
          {{- if or (.p2p.enabled) (.rpc.enabled) (.metrics.enabled) }}
          ports:
            {{- if .rpc.enabled }}
            - name: rpc
              containerPort: {{ .rpc.port }}
              protocol: TCP
            {{- end }}
            {{- if .p2p.enabled }}
            - name: p2p
              containerPort: {{ .p2p.port }}
              protocol: TCP
            {{- end }}
            {{- if .metrics.enabled }}
            - name: metrics
              containerPort: {{ .metrics.port }}
              protocol: TCP
            {{- end }}
          {{- end }}
          {{- end }}
          {{- with .Values.node.resources }}
          resources:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.common.basePath }}
        {{- if eq .Values.common.role "validator" }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}
        {{- end }}
        {{- if eq .Values.common.role "lp" }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}/lp
        {{- end }}
        {{- if eq .Values.common.role "broker" }}
            - name: keys
              mountPath: {{ .Values.common.keys.keysPath }}/broker
        {{- end }}
          {{- with .Values.node.extraEnv }}
          env:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.node.extraEnvFrom }}
          envFrom:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.node.readinessProbe.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.node.ports.p2p.port }}
            initialDelaySeconds: {{ .Values.node.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.node.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.node.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.node.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.node.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.node.ports.p2p.port }}
            initialDelaySeconds: {{ .Values.node.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.node.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.node.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.node.livenessProbe.failureThreshold }}
          {{- end }}
    {{- with .Values.node.affinity }}
      affinity:
          {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.node.nodeSelector }}
      nodeSelector:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.node.tolerations }}
      tolerations:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.node.topologySpreadConstraints }}
      topologySpreadConstraints:
          {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- if eq .Values.common.role "validator" }}
        - name: keys
          secret:
            secretName: {{ .Values.common.keys.existingSecret | default (include "node.fullname" .) }}
            items:
              - key: signing-key
                path: {{ .Values.common.keys.signingKeyFileName }}
              - key: node-key
                path: {{ .Values.common.keys.nodeKeyFileName }}
              - key: ethereum-key
                path: {{ .Values.common.keys.ethereumKeyFileName }}
              - key: arbitrum-key
                path: {{ .Values.common.keys.arbitrumKeyFileName }}
        {{- end }}
        {{- if or (eq .Values.common.role "lp") (eq .Values.common.role "broker") }}
        - name: keys
          secret:
            secretName: {{ .Values.common.keys.existingSecret | default (include "node.fullname" .) }}
            items:
              - key: signing-key
                path: {{ .Values.common.keys.signingKeyFileName }}
        {{- end }}
  {{- if .Values.node.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.node.persistence.existingClaim }}
  {{- else }}
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        labels:
          {{- include "chainflip-node.selectorLabels" . | nindent 10 }}
      spec:
        {{- with .Values.node.persistence.accessModes }}
        accessModes:
        {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.node.persistence.storageClass }}
        storageClassName: {{ . }}
        {{- end }}
        resources:
          requests:
            storage: "{{ .Values.node.persistence.size }}"
  {{- end }}
